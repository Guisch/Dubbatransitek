<!doctype html>
<html>

<head>
  <title>Dubbatransitek</title>
  <% include ../partials/head %>
</head>

<body>
  <div class="container">
    <header>
      <% include ../partials/header %>
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.9.0/css/bootstrap-slider.min.css" integrity="sha256-pO9/5PQba+AqEbehe+LDIXgbKSXTlmwgoeayBfGRwjw=" crossorigin="anonymous" />
    </header>

    <div class="musicSticky">
      <div class="row whiteBg">
        <h1 class="text-center"><%= name %></h1>
        <h4 class="text-center" id="currentTitle"></h4>
      </div>
      <!-- DISPLAY MUSICS -->
      <div class="row whiteBg">
        <div class="col-md-2 col-xs-4 text-center">
          <button id="previous" class="btn btn-primary">
                        <i class="fa fa-step-backward" aria-hidden="true"></i>
                        <%= lang.pages.previous %></button>
        </div>
        <div class="col-md-2 col-xs-4 text-center">
          <button id="backward" class="btn btn-primary">
                        <i class="fa fa-backward" aria-hidden="true"></i>
                        <%= lang.pages.backward %></button>
        </div>
        <div class="col-md-2 col-xs-4 text-center">
          <button id="playpause" class="btn btn-primary">
                        <i class="fa fa-play" aria-hidden="true"></i>
                        <%= lang.pages.playPause %></button>
        </div>
        <div class="col-md-2 col-xs-12 text-center">
          <input id="vol" data-slider-id='volSlider' type="text" />
        </div>
        <div class="col-md-2 col-xs-6 text-center">
          <button id="forward" class="btn btn-primary">
                        <i class="fa fa-forward" aria-hidden="true"></i>
                        <%= lang.pages.forward %></button>
        </div>
        <div class="col-md-2 col-xs-6 text-center">
          <button id="next" class="btn btn-primary">
                        <i class="fa fa-step-forward" aria-hidden="true"></i>
                        <%= lang.pages.next %></button>
        </div>

      </div>
      <div class="row col-md-12 whiteGradient">
        <div id="waveform1"></div>
        <div id="waveform2"></div>
      </div>
    </div>
    <div class="row col-md-12">
      <div class="list-group" id="songs"></div>
    </div>
    <!-- ADD MUSIC -->
    <div class="row">
      <div class="col-md-6">
        <h1><%= lang.pages.addMusic %></h1>
        <div class="form-group">
          <label><%= lang.pages.URLorQuery %></label>
          <input type="url" class="form-control" name="url" id="url" placeholder="<%= lang.pages.URLorQueryPlaceholder %>" required/>
        </div>
        <div class="form-group">
          <button class="btn btn-primary" id="add"><%= lang.pages.add %></button>
        </div>
      </div>
      <div class="col-md-6">
        <h1><%= lang.pages.addSimilar %></h1>
        <div class="form-group">
          <button class="btn btn-primary" id="addSimilar"><%= lang.pages.add %></button>
        </div>
      </div>
    </div>

    <div class="row">
      <!-- DOWNLOAD MUSICS -->
      <div class="col-md-6">
        <h1><%= lang.pages.downloadPlaylist %></h1>
        <div class="form-group">
          <button id="download" class="btn btn-primary"><%= lang.pages.download %></button>
        </div>
      </div>

      <!-- REMOVE PLAYLIST -->
      <div class="col-md-6">
        <h1><%= lang.pages.deletePlaylist %></h1>
        <div class="form-group">
          <button id="del" class="btn btn-primary"><%= lang.pages.delete %></button>
        </div>
      </div>
    </div>

    <div class="row">
      <h1><%= lang.pages.playlistOption %></h1>
      <div class="col-md-6">
        <h4><%= lang.pages.syncImportedPlaylist %></h4>
        <div class="btn-group" data-toggle="buttons">
          <label class="btn btn-default">
              <input type="radio"  name="syncImportedPlaylist" value="on" autocomplete="off"> <%= lang.pages.on %>
            </label>
          <label class="btn btn-default">
              <input type="radio"  name="syncImportedPlaylist" value="off" autocomplete="off"> <%= lang.pages.off %>
            </label>
        </div>
      </div>

      <div class="col-md-6">
        <h4><%= lang.pages.autoAddSimilarSong %></h4>
        <div class="btn-group" data-toggle="buttons">
          <label class="btn btn-default">
              <input type="radio"  name="autoAddSimilarSong" value="on" autocomplete="off"> <%= lang.pages.on %>
            </label>
          <label class="btn btn-default">
              <input type="radio"  name="autoAddSimilarSong" value="off" autocomplete="off"> <%= lang.pages.off %>
            </label>
        </div>
      </div>
    </div>
  </div>
</body>
<footer>
  <% include ../partials/notifJS %>
    <script src="//cdnjs.cloudflare.com/ajax/libs/wavesurfer.js/1.4.0/wavesurfer.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.9.0/bootstrap-slider.min.js"></script>
    <script>
      var songsList = [];
      var wavesurfer1;
      var isWS1Ready = false;
      var wavesurfer2;
      var isWS2Ready = false;
      var currentSong;
      var fadeTime = 10;
      var fc1 = true;
      var fc2 = true;
      var masterVol = 1;
      var syncImportedPlaylist;
      var autoAddSimilarSong;
      if (sessionStorage.getItem('masterVol') != null)
        masterVol = sessionStorage.getItem('masterVol');


      socket.emit('getSongs', '<%= name %>');

      socket.emit('getPlaylistInfo', '<%= name %>');

      socket.on('songs(<%= name %>)', function(infos, songRemoved) {
        songsList = infos;
        $("#songs").empty();

        if (songRemoved !== undefined && songsList.length != 0) {
          if (songRemoved == currentSong) {
            currentSong = null;
            loadWave(songRemoved);
          }
          if (songRemoved == currentSong + 1) {
            if ($('#waveform1').css('opacity') != 0) {
              wavesurfer2.load(songsList[(currentSong + 1) % songsList.length].music.file);
            }
            if ($('#waveform2').css('opacity') != 0) {
              wavesurfer1.load(songsList[(currentSong + 1) % songsList.length].music.file);
            }
          }
          if (songRemoved < currentSong)
            currentSong--;
        }

        for (var i = 0; i < songsList.length; i++) {
          var html;
          if (currentSong == i)
            html = '<div id="song' + i.toString() + '" class="list-group-item list-group-item-action cursorP active row">';
          else
            html = '<div id="song' + i.toString() + '" class="list-group-item list-group-item-action cursorP row">';

          html += '<div class="col-md-10" onClick="loadWave(' + i.toString() + ')">';

          if (songsList[i].music.cover)
            html += '<img class="miniature" src="' + songsList[i].music.cover + '">';
          html += songsList[i].music.title + ' - ' + songsList[i].music.artistName;
          html += '</div><div class="col-md-2">'
          html += '<button class="link btn btn-danger" onClick="deleteSong(' + i.toString() + ')"><i class="fa fa-trash" aria-hidden="true"></i></button>';
          html += '<a class="link btn btn-primary" href="' + songsList[i].music.file + '"><i class="fa fa-download" aria-hidden="true"></i></a>';
          html += '<a class="link btn btn-default" href="' + songsList[i].music.url + '"><i class="fa fa-link" aria-hidden="true"></i></a>';
          html += '</div></div>';
          $("#songs").append(html);
        }

        if (currentSong == songsList.length - 2) {
          if ($('#waveform1').css('opacity') != 0) {
            wavesurfer2.load(songsList[songsList.length - 1].music.file);
            isWS2Ready = false;
          }
          if ($('#waveform2').css('opacity') != 0) {
            wavesurfer1.load(songsList[songsList.length - 1].music.file);
            isWS1Ready = false;
          }
        }
      });

      socket.on('downloadReady', function() {
        window.location.replace('./public/playlists/<%= name %>.zip');
      });

      socket.on('playlistInfo(<%= name %>)', function(opt1, opt2) {
        syncImportedPlaylist = opt1;
        $('input[name=syncImportedPlaylist]')[syncImportedPlaylist ? 0 : 1].checked = syncImportedPlaylist;
        $($('input[name=syncImportedPlaylist]')[syncImportedPlaylist ? 0 : 1]).parent().removeClass('btn-default').addClass('btn-primary');
        $($('input[name=syncImportedPlaylist]')[syncImportedPlaylist ? 1 : 0]).parent().removeClass('btn-primary').addClass('btn-default');

        autoAddSimilarSong = opt2;
        $('input[name=autoAddSimilarSong]')[autoAddSimilarSong ? 0 : 1].checked = autoAddSimilarSong;
        $($('input[name=autoAddSimilarSong]')[autoAddSimilarSong ? 0 : 1]).parent().removeClass('btn-default').addClass('btn-primary');
        $($('input[name=autoAddSimilarSong]')[autoAddSimilarSong ? 1 : 0]).parent().removeClass('btn-primary').addClass('btn-default');

      });

      function deleteSong(id) {
        if (id == currentSong) {
          if (songsList.length == 1)
            currentSong = null;
          $('#currentTitle').empty();
          if ($('#waveform1').css('opacity') != 0)
            wavesurfer1.empty();
          if ($('#waveform2').css('opacity') != 0)
            wavesurfer2.empty();
        }
        socket.emit('removeSong', '<%= name %>', songsList[id].music._id, id);
      }

      function loadWave(index) {
        var id = index % songsList.length;
        if (id < 0)
          id = songsList.length + id;
        if (currentSong == id)
          return;

        if (id == (currentSong + 1) % songsList.length) {
          if (wavesurfer1.isPlaying() && isWS2Ready) {
            wavesurfer1.pause();
            finish1();
            return wavesurfer2.play();
          }

          if (wavesurfer2.isPlaying() && isWS1Ready) {
            wavesurfer2.pause();
            finish2();
            return wavesurfer1.play();
          }
        }

        if (wavesurfer1.isPlaying())
          wavesurfer1.pause();
        if (wavesurfer2.isPlaying())
          wavesurfer2.pause();

        wavesurfer1.setVolume(masterVol);
        wavesurfer2.setVolume(masterVol);
        if (currentSong != null)
          $('#song' + currentSong.toString()).removeClass('active');

        $('#song' + id.toString()).addClass('active');
        $('#currentTitle').text(songsList[id].music.title + ' - ' + songsList[id].music.artistName);
        currentSong = id;
        wavesurfer1.load(songsList[id].music.file);
        isWS1Ready = false;
        //wavesurfer1.play();
        wavesurfer1.on('ready', function() {
          isWS1Ready = true;
          wavesurfer1.play();
          wavesurfer1.un('ready');

          wavesurfer1.on('ready', function() {
            isWS1Ready = true;
          });
          var id = (currentSong + 1) % songsList.length;
          wavesurfer2.load(songsList[id].music.file);
          isWS2Ready = false;
        });
        $('#waveform1').css('opacity', 1);
        $('#waveform1').css('z-index', 10);
        $('#waveform2').css('opacity', 0);
        $('#waveform2').css('z-index', 5);
      }

      function finish1() {
        fc1 = true;
        wavesurfer1.setVolume(masterVol);
        wavesurfer2.setVolume(masterVol);
        $('#waveform1').css('opacity', 0);
        $('#waveform1').css('z-index', 5);
        $('#waveform2').css('opacity', 1);
        $('#waveform2').css('z-index', 10);

        if (currentSong != null)
          $('#song' + currentSong.toString()).removeClass('active');

        currentSong = (currentSong + 1) % songsList.length;
        $('#song' + currentSong.toString()).addClass('active');
        $('#currentTitle').text(songsList[currentSong].music.title + ' - ' + songsList[currentSong].music.artistName);

        var id = (currentSong + 1) % songsList.length;
        wavesurfer1.load(songsList[id].music.file);
        isWS1Ready = false;

        if (currentSong == songsList.length - 1 && autoAddSimilarSong) {
          socket.emit('addSimilar', '<%= name %>', songsList[Math.floor(Math.random() * songsList.length)].music._id);
        }
      }

      function finish2() {
        fc2 = true;
        wavesurfer1.setVolume(masterVol);
        wavesurfer2.setVolume(masterVol);
        $('#waveform1').css('opacity', 1);
        $('#waveform1').css('z-index', 10);
        $('#waveform2').css('opacity', 0);
        $('#waveform2').css('z-index', 5);
        if (currentSong != null)
          $('#song' + currentSong.toString()).removeClass('active');

        currentSong = (currentSong + 1) % songsList.length;
        $('#song' + currentSong.toString()).addClass('active');
        $('#currentTitle').text(songsList[currentSong].music.title + ' - ' + songsList[currentSong].music.artistName);

        var id = (currentSong + 1) % songsList.length;
        wavesurfer2.load(songsList[id].music.file);
        isWS2Ready = false;

        if (currentSong == songsList.length - 1 && autoAddSimilarSong) {
          socket.emit('addSimilar', '<%= name %>', songsList[Math.floor(Math.random() * songsList.length)].music._id);
        }
      }

      $(document).ready(function() {
        wavesurfer1 = WaveSurfer.create({
          container: '#waveform1',
          waveColor: 'black',
          progressColor: 'grey',
          barWidth: 3
        });

        wavesurfer2 = WaveSurfer.create({
          container: '#waveform2',
          waveColor: 'black',
          progressColor: 'grey',
          barWidth: 3
        });

        $('#waveform2').css('opacity', 0);

        wavesurfer1.on('audioprocess', function() {
          if (wavesurfer1.getDuration() - wavesurfer1.getCurrentTime() <= fadeTime) {
            if (fc1) {
              wavesurfer2.play(0);
              fc1 = false;
            }
            wavesurfer1.setVolume(masterVol * ((wavesurfer1.getDuration() - wavesurfer1.getCurrentTime()) / fadeTime));
            wavesurfer2.setVolume(masterVol * (wavesurfer2.getCurrentTime() / fadeTime));
          }
        });

        wavesurfer1.on('finish', finish1);

        wavesurfer1.on('seek', function() {
          fc1 = true;
          $('#waveform1').css('opacity', 1);
          $('#waveform2').css('opacity', 0);
          wavesurfer2.pause();
          wavesurfer1.setVolume(masterVol);
        });

        wavesurfer2.on('audioprocess', function() {
          if (wavesurfer2.getDuration() - wavesurfer2.getCurrentTime() <= fadeTime) {
            if (fc2) {
              wavesurfer1.play(0);
              fc2 = false;
            }
            wavesurfer2.setVolume(masterVol * ((wavesurfer2.getDuration() - wavesurfer2.getCurrentTime()) / fadeTime));
            wavesurfer1.setVolume(masterVol * (wavesurfer1.getCurrentTime() / fadeTime));
          }
        });

        wavesurfer2.on('finish', finish2);

        wavesurfer2.on('seek', function() {
          fc2 = true;
          $('#waveform2').css('opacity', 1);
          $('#waveform1').css('opacity', 0);
          wavesurfer1.pause();
          wavesurfer2.setVolume(masterVol);
        });

        wavesurfer2.on('ready', function() {
          isWS2Ready = true;
        });

        $('#add').click(function() {
          socket.emit('addSong', '<%= name %>', $('#url').val());
          notify = $.notify({
            icon: 'fa fa-circle-o-notch fa-spin',
            message: '<%= lang.pages.loading %>'
          }, {
            type: 'info',
            delay: 0
          });
          $('#url').val('');
        });

        $('#addSimilar').click(function() {
          notify = $.notify({
            icon: 'fa fa-circle-o-notch fa-spin',
            message: '<%= lang.pages.loading %>'
          }, {
            type: 'info',
            delay: 0
          });
          socket.emit('addSimilar', '<%= name %>', songsList[currentSong].music._id);
        })

        $('#del').click(function(eve) {
          eve.stopPropagation();
          notify = $.notify({
            icon: 'fa fa-circle-o-notch fa-spin',
            message: '<%= lang.pages.loading %>'
          }, {
            type: 'info',
            delay: 0
          });
          socket.emit('removePlaylist', '<%= name %>');
          setTimeout(function() {
            window.location.replace("./allPlaylists");
          }, 5000);
        });

        $('#download').click(function(eve) {
          eve.stopPropagation();
          notify = $.notify({
            icon: 'fa fa-circle-o-notch fa-spin',
            message: '<%= lang.pages.loading %>'
          }, {
            type: 'info',
            delay: 0
          });
          socket.emit('downloadPlaylist', '<%= name %>');
        });

        $('#playpause').click(function() {
          if ($('#waveform1').css('opacity') != 0) {
            wavesurfer1.playPause();
            if (wavesurfer1.getDuration() - wavesurfer1.getCurrentTime() <= fadeTime) {
              wavesurfer2.playPause();
            }
          }
          if ($('#waveform2').css('opacity') != 0) {
            wavesurfer2.playPause();
            if (wavesurfer2.getDuration() - wavesurfer2.getCurrentTime() <= fadeTime) {
              wavesurfer1.playPause();
            }
          }

          if (!currentSong && songsList.length > 0) {
            loadWave(0);
          }
        });

        $('#backward').click(function() {
          if ($('#waveform1').css('opacity') != 0) {
            wavesurfer1.skipBackward();
          }
          if ($('#waveform2').css('opacity') != 0) {
            wavesurfer2.skipBackward();
          }
        });

        $('#forward').click(function() {
          if ($('#waveform1').css('opacity') != 0) {
            wavesurfer1.skipForward();
          }
          if ($('#waveform2').css('opacity') != 0) {
            wavesurfer2.skipForward();
          }
        });

        $('#previous').click(function() {
          if (currentSong !== undefined)
            loadWave(currentSong - 1);
        });

        $('#next').click(function() {
          if (currentSong !== undefined)
            loadWave(currentSong + 1);
        });

        var vol = $("#vol").slider({
          formatter: function(value) {
            if (value == 1)
              return '<%= lang.pages.muted %>';
            else
              return '<%= lang.pages.volume %>: ' + value + '%';
          },
          min: 0,
          max: 100,
          scale: 'logarithmic',
          step: 0.1,
          value: masterVol * 100
        }).on('change', function(e) {
          if (e.value.newValue == 1) {
            masterVol = 0;
            wavesurfer1.setVolume(masterVol);
            wavesurfer2.setVolume(masterVol);
          } else {
            masterVol = e.value.newValue / 100;
            wavesurfer1.setVolume(masterVol);
            wavesurfer2.setVolume(masterVol);
          }
          sessionStorage.setItem('masterVol', masterVol);
        });

        $('input[name=syncImportedPlaylist]').click(function() {
          var val;
          if ($('input[name=syncImportedPlaylist]:checked').val() == 'on')
            val = true;
          else if ($('input[name=syncImportedPlaylist]:checked').val() == 'off')
            val = false;

          if (val != syncImportedPlaylist)
            socket.emit('editPlaylistOptions', '<%= name %>', val, autoAddSimilarSong);
        });

        $('input[name=autoAddSimilarSong]').click(function() {
          var val;
          if ($('input[name=autoAddSimilarSong]:checked').val() == 'on')
            val = true;
          else if ($('input[name=autoAddSimilarSong]:checked').val() == 'off')
            val = false;

          if (val != autoAddSimilarSong)
            socket.emit('editPlaylistOptions', '<%= name %>', syncImportedPlaylist, val);
        });
      });
    </script>
</footer>

</html>
